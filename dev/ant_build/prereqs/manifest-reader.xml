<!--
    IBM Confidential
    OCO Source Materials
    (C) Copyright IBM Corp. 2018 All Rights Reserved.
    The source code for this program is not published or otherwise
    divested of its trade secrets, irrespective of what has
    been deposited with the U.S. Copyright Office.
-->

<project name="manifest-reader" default="build">
	<!-- Build stub -->
	<target name="build"/>

	<!--
	    Loads entries from a manifest file into a property.
	    https://stackoverflow.com/questions/5313438/ant-read-existing-manifest-version-and-append-to-it
	    
	    @jar		JarFile to read manifest data from
	    @entry      The name of the manifest entry to load (optional)
	    @prefix     A prefix to prepend (optional)
	-->
	<scriptdef name="getManifestEntries" language="javascript" description="Gets all entries or a specified one of a manifest file">
	    <attribute name="jar" />
	    <attribute name="entry" />
	    <attribute name="outputproperty" />
	    <![CDATA[
	        var jar = attributes.get("jar");
	        var entry = attributes.get("entry");
	        if (entry == null) {
	            entry = "";
	        }
	        var outputproperty = attributes.get("outputproperty");
	        if (outputproperty == null) {
	            outputproperty = "";
	        }
	
	        var manifest;
 			if (jar != null) {
	            var jarfile = new java.util.jar.JarFile(new java.io.File(jar));
	            manifest = jarfile.getManifest();
        	} else {
            	self.fail("You must provide a jar file");
        	}
	
	        if (manifest == null) {
	            self.log("Problem loading the Manifest from " + jar);
	        } else {
	            var attributes = manifest.getMainAttributes();
	            if (attributes != null) {
	                if (entry != "") {
	                	var value = attributes.getValue(entry);
	                	if(value == null) {
	                		self.log("Could not get entry " + entry + " from " + jar);
	                	}
	                    project.setProperty(outputproperty, value);
	                } else {
	                    var it = attributes.keySet().iterator();
	                    while (it.hasNext()) {
	                        var key = it.next();
	                        project.setProperty(outputproperty, attributes.getValue(key));
	                    }
	                }
	            }
	        }
	    ]]>
	</scriptdef>
</project>
